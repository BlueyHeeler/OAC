.include "MACROSv24.s"
.data
black: .word 40, 40
.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
gray: .word 40, 40
.byte 82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,
82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82
background2: .word 16, 6
.byte   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
red: .word 40, 40
.byte 7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
yellow: .word 40, 40
.byte 63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,54,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,54,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,62,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,62,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,
63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63
blue: .word 40, 40
.byte 192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,


POS_MAPA: .half 0
CHAR_POS_UP: .half 3, 1
CHAR_POS_DOWN: .half 4, 1
ITEM_1_BYTE: .byte 0
PEQUENO_GRANDE: .byte 1
RA_print_matriz: .word 0
TEMPO_INICIAL: .word 0
TEMPO_ATUAL: .word 0
TEMPO_INI_MUSIC: .word 0
TEMPO_BREAK_MUSIC: .word 0

.text
GAME_LOOP:	
		call KEY2.1
		xori s0,s0,1			# inverte o valor frame atual (somente o registrador)
		mv a3, s0
		la t0, POS_MAPA
		call PRINT_MATRIZ_2
		
		li t0,0xFF200604		# carrega em t0 o endereco de troca de frame
		sw s0,0(t0)			# mostra o sprite pronto para o usuario
		
		j GAME_LOOP

PRINT_MATRIZ_2:	
		la t0, RA_print_matriz
		sw ra, 0(t0)
		la t0, POS_MAPA			#posicao do mapa
		lh t1, 0(t0)			#valor da posicao do mapa
		la s1, background2		#carrega o endereco do background
		li s2, 8			#(QUANTIDADE DE BLOCOS NA HORIZONTAL QUE SER O RENDERIZADOS)
		addi s2, s2, 1
		lw s3, 4(s1)			#(QUANTIDADE DE BLOCOS NA VERTICAL QUE SER O RENDERIZADOS)
		addi s1, s1, 8			#pula a largura e a altura
		add s1, s1, t1			#NOVA POSICAO DO MAPA
		li s5, 1			#s5 = 1
		li s6, 1			#s6 = 1
		mv a1, zero			#a1 = 0
		mv a2, zero			#a2 = 0
		jal PULAR_COLUNA
		
PULAR_COLUNA:	beq s5, s2, PULAR_LINHA 	#s5 = s2 ? caso sim pule para caso_1
		jal CASE1				#caso n o pule para iteracoes

PULAR_LINHA:	addi s1, s1, 8			#PULA OS BLOCOS QUE N O DEVEM SER IMPRESSOS, OU SEJA, PULA A LINHA
		beq s6, s3, END			#s6 = s3 ? caso sim pule para end
		addi s6, s6, 1			#s6 += 1
		li s5, 1			#s5 = 1
		addi a2, a2, 39			#a2 += 39
		j CASE1
				
CASE1:		lb s4, 0(s1)			#guarda os bytes de background em s4
		li s7, 0			#s7 = 0
		bne s4, s7, CASE2		#se s7 != s4
		la a0, black			#carrega em a0 o endereco de black
		jal PRINT
		addi a1, a1, 40			#a1 += 40	
		addi s1, s1, 1			#s1 += 1
		addi s5, s5, 1			#s5 += 1
		j PULAR_COLUNA	
		
CASE2:		li s7, 1
		bne s4, s7, CASE3		#se s7 != s4
		la a0, gray
		jal PRINT
		addi a1, a1, 40			#a1 += 40	
		addi s1, s1, 1			#s1 += 1
		addi s5, s5, 1			#s5 += 1
		j PULAR_COLUNA

CASE3:		
		li t0, 1
		li s7 2
		bne s4, s7, CASE4
		beq a3, t0, CASE3_2
		la a0, red
		jal PRINT
		addi a1, a1, 40			#a1 += 40	
		addi s1, s1, 1			#s1 += 1
		addi s5, s5, 1			#s5 += 1
		j PULAR_COLUNA
CASE3_2:
		la a0, yellow
		jal PRINT
		addi a1, a1, 40
		addi s1, s1, 1
		addi s5, s5, 1
		j PULAR_COLUNA

CASE4:		
		la a0, blue
		jal PRINT
		addi a1, a1, 40
		addi s1, s1, 1
		addi s5, s5, 1
		j PULAR_COLUNA	

END:
		la t0, RA_print_matriz
		lw ra, 0(t0)
		ret

PRINT:		li t0,0xFF0			# carrega 0xFF0 em t0
		add t0,t0,a3			# adiciona o frame ao FF0 (se o frame for 1 vira FF1, se for 0 fica FF0)
		slli t0,t0,20			# shift de 20 bits pra esquerda (0xFF0 vira 0xFF000000, 0xFF1 vira 0xFF100000)
		
		add t0,t0,a1			# adiciona x ao t0
		
		li t1,320			# t1 = 320
		mul t1,t1,a2			# t1 = 320 * y
		add t0,t0,t1			# adiciona t1 ao t0
		
		addi t1,a0,8			# t1 = a0 + 8
		
		mv t2,zero			# zera t2
		mv t3,zero			# zera t3
		
		lw t4,0(a0)			# carrega a largura em t4
		lw t5,4(a0)			# carrega a altura em t5
		
PRINT_LINHA:	lw t6,0(t1)			# carrega em t6 uma word (4 pixeis) da imagem
		sw t6,0(t0)			# imprime no bitmap a word (4 pixeis) da imagem
		
		addi t0,t0,4			# incrementa endereco do bitmap
		addi t1,t1,4			# incrementa endereco da imagem
		
		addi t3,t3,4			# incrementa contador de coluna
		blt t3,t4,PRINT_LINHA		# se contador da coluna < largura, continue imprimindo

		addi t0,t0,320			# t0 += 320
		sub t0,t0,t4			# t0 -= largura da imagem
		# ^ isso serve pra "pular" de linha no bitmap display
		
		mv t3,zero			# zera t3 (contador de coluna)
		addi t2,t2,1			# incrementa contador de linha
		bgt t5,t2,PRINT_LINHA		# se altura > contador de linha, continue imprimindo
		
		mv t0, zero
		mv t1, zero
		mv t2, zero
		mv t3, zero
		mv t4, zero
		mv t5, zero
		ret				# retorna
	
KEY2.1:		li t1,0xFF200000		# carrega o endereco de controle do KDMMIO
		lw t0,0(t1)			# Le bit de Controle Teclado
		andi t0,t0,0x0001		# mascara o bit menos significativo
   		beq t0,zero,DEFAULT   	# Se nao ha tecla pressionada entao vai para FIM
  		lw t2,4(t1)  			# le o valor da tecla tecla
		
		li t0,'W'
		beq t2,t0,CIMA			# se tecla pressionada for 'w', va CHAR_CIMA

		li t0,'A'
		beq t2,t0,ESQUERDA		# se tecla pressionada for 'a', va CHAR_CIMA
		
		li t0,'S'
		beq t2,t0,BAIXO			# se tecla pressionada for 's', va CHAR_CIMA
		
		li t0,'D'
		beq t2,t0,DIREITA		# se tecla pressionada for 'd', va CHAR_CIMA
		
		li t0,'w'
		beq t2,t0,CIMA_w			# se tecla pressionada for 'w', va CHAR_CIMA

		li t0,'a'
		beq t2,t0,ESQUERDA_a		# se tecla pressionada for 'a', va CHAR_CIMA
		
		li t0,'s'
		beq t2,t0,BAIXO_b		# se tecla pressionada for 's', va CHAR_CIMA
		
		li t0,'d'
		beq t2,t0,DIREITA_d		# se tecla pressionada for 'd', va CHAR_CIMA
		
		li t0,'o'		
		beq t2, t0,MOV_ESQ		# se tecla pressionada for 'o', va MOV_ESQ
		
		li t0,'p'
		beq t2,t0,MOV_DIR		# se tecla pressionada for 'p', va MOV_DIR
		
		li t0, 'G'			# se tecla pressionada for 'g', va GROW
		beq t2, t0, GROW
		
		li t0, 'g'			# se tecla pressionada for 'G', va GROW
		beq t2, t0, GROW
		
		li t0, 'h'			# se tecla pressionada for 'h', va HALF
		beq t2, t0, HALF
		
		li t0, 'H'			# se tecla pressionada for 'h', va HALF
		beq t2, t0, HALF
		
		li t0,'O'		
		beq t2, t0,MOV_ESQ		# se tecla pressionada for 'o', va MOV_ESQ
		
		li t0,'P'
		beq t2,t0,MOV_DIR		# se tecla pressionada for 'p', va MOV_DIR
		
		li t0,'u'			# se tecla pressionada for 'u' va EXIT
		beq t2,t0,EXIT
	
DEFAULT:		
		mv t0, zero
		mv t1, zero
		mv t2, zero
		mv t3, zero
		mv t4, zero
		mv t5, zero
		ret				# retorna
		
CIMA:		
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		beq t0, zero, FIM
		#CIMA PARTE SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 contem a posicao do CHAR_POS em relacao a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 16
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		#===============================================================#
		addi sp, sp, -20	#alocando pilha
		sw t0, 0(sp)
		sw t1, 4(sp)
		sw t2, 8(sp)
		sw t3, 12(sp)
		sw t4, 16(sp)
		#================================================================#
		#CIMA PARTE INFERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS_UP
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 contem a posicao do CHAR_POS em relacao a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 16
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		#N o h  colis o na PARTE SUPERIOR NEM NA PARTE INFERIOR
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		lw t0, 0(sp)
		lw t1, 4(sp)
		lw t2, 8(sp)
		lw t3, 12(sp)
		lw t4, 16(sp)
		addi sp, sp, 20
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		j FIM

BAIXO:
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		beq t0, zero, FIM
		#BAIXO SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -16
		#====================================================================#
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		addi sp, sp, -24
		sw ra, 0(sp)
		sw t0, 4(sp)
		sw t1, 8(sp)
		sw t2, 12(sp)
		sw t3, 16(sp)
		sw t4, 20(sp)
		#===================================================================#
		#BAIXO INFERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -16
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		jal ITEM_1
		#===================================================================#
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		lw ra, 0(sp)
		lw t0, 4(sp)
		lw t1, 8(sp)
		lw t2, 12(sp)
		lw t3, 16(sp)
		lw t4, 20(sp)
		addi sp, sp, 24
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		
		j FIM

ESQUERDA:
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		beq t0, zero, FIM
		#ESQUERDA SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 1
		#====================================================================#
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		addi sp, sp, -24
		sw ra, 0(sp)
		sw t0, 4(sp)
		sw t1, 8(sp)
		sw t2, 12(sp)
		sw t3, 16(sp)
		sw t4, 20(sp)
		#===================================================================#
		#ESQUERDA INFERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 1
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		li t5, 3
		jal ITEM_1	
		#nao ha colisao nem na parte superior nem na inferior
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		lw ra, 0(sp)
		lw t0, 4(sp)
		lw t1, 8(sp)
		lw t2, 12(sp)
		lw t3, 16(sp)
		lw t4, 20(sp)
		addi sp, sp, 24
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		j FIM
	
DIREITA:
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		beq t0, zero, FIM
		#DIREITA SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -1
		#====================================================================#
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		addi sp, sp, -24
		sw ra, 0(sp)
		sw t0, 4(sp)
		sw t1, 8(sp)
		sw t2, 12(sp)
		sw t3, 16(sp)
		sw t4, 20(sp)
		#===================================================================#
		#DIREITA INFERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -1
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		li t5, 3
		jal ITEM_1
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		lw ra, 0(sp)
		lw t0, 4(sp)
		lw t1, 8(sp)
		lw t2, 12(sp)
		lw t3, 16(sp)
		lw t4, 20(sp)
		addi sp, sp, 24
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		j FIM

MOV_ESQ:	la t0, POS_MAPA		#endereco da posicao do mapa
		lh t1, 0(t0)		#valor do endereco
		li t2, 0		#t2 = 0
		beq t1, t2, GAME_LOOP	#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda
		addi t1, t1, -1		#caso contrario
		sh t1, 0(t0)		#salvando no endereco da posicao do mapa
		j FIM

MOV_DIR:	la t0, POS_MAPA		#endereco da posicao do mapa
		lh t1, 0(t0)		#valor do endereco
		addi t1, t1, 8		#
		li t2, 16		#t2 = 0
		beq t1, t2, GAME_LOOP	#se t1 == t2   porque est  na borda e o mapa n o pode ir mais pra esquerda
		addi t1, t1, -8		
		addi t1, t1, 1		#caso contr rio
		sh t1, 0(t0)		#salvando no endereco da posicao do mapa
		j FIM
GROW:		
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 contem a posicao do CHAR_POS em relacao a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 16
		beq t3, t5, FIM	#v  para GAME_LOOP

		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		li t1, 1
		beq t0, t1, FIM
		la t0, PEQUENO_GRANDE
		li t1, 1
		sb t1, 0(t0)
		#CIMA PARTE SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS_UP
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 contem a posicao do CHAR_POS em relacao a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 16
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3,0(t2)
		j FIM
		
HALF:		
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		beq t0, zero, FIM
		la t0, ITEM_1_BYTE
		lb t0, 0(t0)
		beq t0, zero, FIM
		la t0, PEQUENO_GRANDE
		sb zero, 0(t0)
		#BAIXO PARTE SUPERIOR
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_UP	#endereco de CHAR_POS
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
					#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
					#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -16
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		j FIM

CIMA_w:		
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		li t1, 1
		beq t0, t1, FIM
		#CIMA
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 16 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
					#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
					#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -16	#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 16		#voltando pro endereco antigo(vai servir para cobrir o "rastro")
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -16		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		la t2, CHAR_POS_UP
		sh t3, 0(t2)
		j FIM

BAIXO_b:
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		li t1, 1
		beq t0, t1, FIM
		#BAIXO
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 8 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
					#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -16
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		#fim do procedimento que averigua colisao
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 16		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 0(t2)		#carrega o y em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 0(t2)		#novo CHAR_POS
		la t2, CHAR_POS_UP
		sh t3, 0(t2)
		j FIM

ESQUERDA_a:	
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		li t1, 1
		beq t0, t1, FIM
		#ESQUERDA
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
					#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, 1
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, -1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, -1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		la t2, CHAR_POS_UP
		sh t3, 2(t2)
		j FIM
	
DIREITA_d:
		la t0, PEQUENO_GRANDE
		lb t0, 0(t0)
		li t1, 1
		beq t0, t1, FIM
		#DIREITA
		la t0, background2	#endereco do mini_background
		addi t0, t0, 8		#pula a largura e a altura
		la t2, CHAR_POS_DOWN	#endereco de CHAR_POS
		li t3, 16		#carrega 4 em t3
		lh t4, 0(t2)		#carrega o y em t4
		mul t4, t4, t3		#em qual linha o CHAR est 
		lh t3, 2(t2)		#carrega o x em t3
		add t4, t4, t3		#em qual coluna o CHAR est 
		#agora t4 cont m a posi  o do CHAR_POS em rela  o a matriz
		#procedimento que averigua colisao
		add t0, t0, t4		#endereco do CHAR_POS na matriz
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		lb t3, 0(t0)		#carrega o valor de CHAR_POS da matriz
		li t5, 1 		#t5 = 1
		addi t0, t0, -1
		beq t3, t5, GAME_LOOP	#v  para GAME_LOOP
		
		li t3, 0		#carrega 0 em t3
		sb t3, 0(t0)		#colocando 0 no endereco
		li t3, 2		#carrega 2 em t3
		addi t0, t0, 1		#novo endereco do CHAR_POS na matriz
		sb t3, 0(t0)		#colocando 2 no endereco
		lh t3, 2(t2)		#carrega o x em t3
		addi t3, t3, 1		#decrementa um em t3
		sh t3, 2(t2)		#novo CHAR_POS
		la t2, CHAR_POS_UP
		sh t3, 2(t2)
		j FIM

ITEM_1:
	li t5, 3
	beq t3, t5, TEM_ITEM_1
	ret
	
TEM_ITEM_1:
	la a0, ITEM_1_BYTE
	li a1, 1
	sb a1, 0(a0)
	ret
FIM:
	mv a0, zero
	mv a1, zero
	mv t0, zero
	mv t1, zero
	mv t2, zero
	mv t3, zero
	mv t4, zero
	mv t5, zero
	ret
EXIT:
		li a7, 10
		ecall

.include "SYSTEMv24.s"
